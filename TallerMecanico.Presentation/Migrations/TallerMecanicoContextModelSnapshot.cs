// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TallerMecanico.Persistence.Context;

#nullable disable

namespace TallerMecanico.Presentation.Migrations
{
    [DbContext(typeof(TallerMecanicoContext))]
    partial class TallerMecanicoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TallerMecanico.Models.Models.Desperfecto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdPresupuesto")
                        .HasColumnType("int");

                    b.Property<decimal>("ManoDeObra")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Tiempo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPresupuesto");

                    b.ToTable("Desperfectos");
                });

            modelBuilder.Entity("TallerMecanico.Models.Models.DesperfectoRepuesto", b =>
                {
                    b.Property<int>("DesperfectoId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("RepuestoId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("DesperfectoId", "RepuestoId");

                    b.HasIndex("RepuestoId");

                    b.ToTable("DesperfectoRepuestos");
                });

            modelBuilder.Entity("TallerMecanico.Models.Models.Presupuesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdVehiculo")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("IdVehiculo")
                        .IsUnique();

                    b.ToTable("Presupuestos");
                });

            modelBuilder.Entity("TallerMecanico.Models.Models.Repuesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("Repuestos");
                });

            modelBuilder.Entity("TallerMecanico.Models.Models.Vehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vehiculos", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TallerMecanico.Models.Models.Automovil", b =>
                {
                    b.HasBaseType("TallerMecanico.Models.Models.Vehiculo");

                    b.Property<int>("CantidadPuertas")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.ToTable("Automoviles", (string)null);
                });

            modelBuilder.Entity("TallerMecanico.Models.Models.Moto", b =>
                {
                    b.HasBaseType("TallerMecanico.Models.Models.Vehiculo");

                    b.Property<string>("Cilindrada")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Motos", (string)null);
                });

            modelBuilder.Entity("TallerMecanico.Models.Models.Desperfecto", b =>
                {
                    b.HasOne("TallerMecanico.Models.Models.Presupuesto", "Presupuesto")
                        .WithMany("Desperfectos")
                        .HasForeignKey("IdPresupuesto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Presupuesto");
                });

            modelBuilder.Entity("TallerMecanico.Models.Models.DesperfectoRepuesto", b =>
                {
                    b.HasOne("TallerMecanico.Models.Models.Desperfecto", "Desperfecto")
                        .WithMany("DesperfectoRepuestos")
                        .HasForeignKey("DesperfectoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TallerMecanico.Models.Models.Repuesto", "Repuesto")
                        .WithMany("DesperfectoRepuestos")
                        .HasForeignKey("RepuestoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Desperfecto");

                    b.Navigation("Repuesto");
                });

            modelBuilder.Entity("TallerMecanico.Models.Models.Presupuesto", b =>
                {
                    b.HasOne("TallerMecanico.Models.Models.Vehiculo", "Vehiculo")
                        .WithOne()
                        .HasForeignKey("TallerMecanico.Models.Models.Presupuesto", "IdVehiculo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("TallerMecanico.Models.Models.Automovil", b =>
                {
                    b.HasOne("TallerMecanico.Models.Models.Vehiculo", null)
                        .WithOne()
                        .HasForeignKey("TallerMecanico.Models.Models.Automovil", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TallerMecanico.Models.Models.Moto", b =>
                {
                    b.HasOne("TallerMecanico.Models.Models.Vehiculo", null)
                        .WithOne()
                        .HasForeignKey("TallerMecanico.Models.Models.Moto", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TallerMecanico.Models.Models.Desperfecto", b =>
                {
                    b.Navigation("DesperfectoRepuestos");
                });

            modelBuilder.Entity("TallerMecanico.Models.Models.Presupuesto", b =>
                {
                    b.Navigation("Desperfectos");
                });

            modelBuilder.Entity("TallerMecanico.Models.Models.Repuesto", b =>
                {
                    b.Navigation("DesperfectoRepuestos");
                });
#pragma warning restore 612, 618
        }
    }
}
